import React from 'react'
// import axios from 'axios';
import { useDispatch, useSelector } from 'react-redux'
import { selectFilter, setCategoryId, setCurrentPage, setFilters } from '../redux/slices/filterSlice';
import Categories from "../components/Categories";
import Sort, { list } from "../components/Sort";
import PizzaBlock from "../components/PizzaBlock";
import Skeleton from "../components/PizzaBlock/Skeleton";
import Pagination from '../components/Pagination';
// import pizzas from './assets/pizzas.json'
import qs from 'qs';
import { Link, useNavigate } from 'react-router-dom';
import { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice';



const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);
  // const { items, status } = useSelector((state) => state.pizza)
  const { items, status } = useSelector(selectPizzaData)

  // const { categoryId, sort, currentPage } = useSelector((state) => state.filter);
  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);


  // const categoryId = useSelector(state => state.filter.categoryId);
  // const sortType = useSelector(state => state.filter.sort.sortProperty);

  // const { searchValue } = React.useContext(SearchContext)
  // const [items, setItems] = React.useState([]);
  // const [isLoading, setIsLoading] = React.useState(true)

  // const [categoryId, setCategoryId] = React.useState(0);  // –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ü–µ –º—è—Å–Ω—ñ, –≥—Ä–∏–ª—å —ñ —Ç–¥ –ø—ñ—Ü—Ü–∏. –∫–∞—Ç–µ–≥–æ—Ä—ñ—è 0 —Ü–µ —É—Å—ñ –ø—ñ—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä—Ç—É // —É–±—Ä–∞–ª–∏ –Ω–∞ 13–æ–º —É—Ä–æ–∫—ñ

  // const [sortType, setSortType] = React.useState({
  //   name: '–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
  //   sortProperty: 'rating',
  // });

  const onChangeCategory = (idx: number) => {
    // console.log(id); // –Ω–æ–º–µ—Ä –∫–∞—Ç—î–≥–æ—Ä—ñ—ó –ø–æ–ª—É—á–∞—é
    dispatch(setCategoryId(idx))
  }

  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page))
  }

  const getPizzas = async () => {
    // setIsLoading(true);

    const sortBy = sort.sortProperty.replace('-', '');
    const order = sort.sortProperty.includes('-') ? 'asc' : 'desc';
    const category = categoryId > 0 ? `category=${categoryId}` : ''
    const search = searchValue ? `&search=${searchValue}` : ''

    // await axios.get(`https://63f1fde1aab7d09125ff6f7c.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`)
    // .then((res) => {
    //   setItems(res.data); // —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—ñ—Ü–∏ —ñ –Ω–∏–∂–µ –æ—Ç–∫–ª—é—á—ñ–ª–∏ —Å–∫—î–ª—î—Ç–æ–Ω
    //   setIsLoading(false);
    // });

    // try {
    // const {data} = await axios.get(`https://63f1fde1aab7d09125ff6f7c.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`);
    // // setItems(res.data); // —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—ñ—Ü–∏ —ñ –Ω–∏–∂–µ –æ—Ç–∫–ª—é—á—ñ–ª–∏ —Å–∫—î–ª—î—Ç–æ–Ω
    dispatch(
          // @ts-ignore
      fetchPizzas({
      sortBy,
      order,
      category,
      search,
      currentPage,
    }),
    );
    // } catch (error) {
    //   // setIsLoading(false);
    //   alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ü—Ü')
    // } 
    // finally {
    //   setIsLoading(false);
    // }
    window.scrollTo(0, 0);
  }


  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ
  React.useEffect(() => {
    if (isMounted.current) {   // —è–∫—â–æ –±—É–≤ –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä
      const queryString = qs.stringify({   //stringify –ø—Ä–µ–≤—Ä–∞—â–∞—î –æ–±—å—î–∫—Ç –≤ —Å—Ç—Ä–æ—á–∫—É
        sortProperty: sort.sortProperty,
        categoryId,
        currentPage,
      })
      navigate(`?${queryString}`)
      // console.log(queryString); // –≤–µ—Ä–Ω—É–ª–æ sortProperty=rating&categoryId=0&currentPage=1
    }
    isMounted.current = true;
  }, [categoryId, sort.sortProperty, currentPage])


  //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—Å—è —Ä–µ–¥—É–∫—Å–µ
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      // console.log(params);

      const sort = list.find(obj => obj.sortProperty == params.sortProperty)

      dispatch(
        setFilters({
          ...params,
          sort,
        })
      )
      isSearch.current = true;
    }
  }, []) // –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ —Ç—ñ–ø–∞

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã 
  React.useEffect(() => {
    window.scrollTo(0, 0);

    if (!isSearch.current) {
      getPizzas();
    }
    isSearch.current = false;
  }, [categoryId, sort.sortProperty, searchValue, currentPage])





  const pizzas = items
    // .filter(obj => {  // —Ü–µ –∑ —Ñ—Ä–æ–Ω—Ç–∞ —Ñ—ñ–ª—å—Ç—Ä –ø–µ—Ä–µ—Ä–æ–±–∏–ª–∏ –Ω–∞ –ø–æ—à—É–∫ –≤ –±–µ–∫—ñ, —Ç–æ–≥–æ —Ü–µ —É–±—Ä–∞–ª–∏
    //   if (obj.title.toLowerCase().includes(searchValue.toLowerCase())) { // –æ—Ü–µ —Ñ—ñ–ª—å—Ç—Ä –ø–æ —Ç–æ–º—É —à–æ –≤–≤–æ–¥–∏–º –≤ —ñ–Ω–ø—É—Ç—ñ
    //     return true;
    //   }
    //   return false
    // })
    .map((obj: any) => <PizzaBlock key={obj.id} {...obj} />); // —Ä–µ–Ω–¥–µ—Ä –ø—ñ—Ü—Ü
    // .map((obj) =><Link key={obj.id}  to={`/pizza/${obj.id}`}> <PizzaBlock {...obj} /> </Link>); // —Ä–µ–Ω–¥–µ—Ä –ø—ñ—Ü—Ü
  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

  return (
    <>
      <div className='container'>
        <div className="content__top">
          <Categories value={categoryId} onChangeCategory={onChangeCategory} />
          {/* <Sort value={sortType} onChangeSort={(i)=> setSortType(i) }/> */}
          <Sort />
        </div>
        <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>


        {
          status == 'error' ? (<div className='content__error-info'>
            <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <span>üòï</span></h2>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é <br />
              –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É, –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </p>
          </div>) : (<div className="content__items"> {status == 'loading'
            ? skeletons
            : pizzas} </div>
          )}
        {/* //               items.map((obj) => isLoading ? <Skeleton /> : (
//                 <PizzaBlock key={obj.id}
//                   {...obj} /> ))}
//  */}
        {/* title={obj.title} price={obj.price} image={obj.imageUrl} sizes={obj.sizes} types={obj.types} */}
        {/* <PizzaBlock title="–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è" price={500}/> */}

        <Pagination currentPage={currentPage} onChangePage={onChangePage} />
      </div>
    </>
  )
}

export default Home;

//—Å–æ—Ä—Ç—ñ–Ω–≥ —ñ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü–∏—è
//https://github.com/mockapi-io/docs/wiki/Code-examples#pagination
// —É—Ä–æ–∫ 9, —Å–æ—Ä—Ç—ñ–Ω–≥: sortBy=category&order=desc - —Ü–µ —Å–æ—Ä—Ç—ñ—Ä–æ–≤–∫—É —Ä–æ–±–∏ –ø–æ category (—Ü–µ –∫–ª—é—á –≤ –æ–±—å—î–∫—Ç—ñ) —ñ order (—Å–æ—Ä—Ç—ñ—Ä—É–π) –≤ –ø–æ—Ä—è–¥–∫—É desc —É–±–∏–≤–∞–Ω—ñ—è  // –≤–Ω–∞—á–∞–ª—ñ sortBy –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç—å, –∞ –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç—å orderBy
// https://63f1fde1aab7d09125ff6f7c.mockapi.io/items?orderBy=price&order=desc –æ—Ç—Å–æ—Ä—Ç—ñ—Ä—É–≤–∞–ª–∏ —Ç—É—Ç –ø–æ —Ü—ñ–Ω—ñ –Ω–∏–∑–ø–∞–¥–∞—é—â–æ–π —ñ –¥–æ–±–∞–ª–∏ –ø–æ—ñ—Å–∫ –ø–∞–ø–µ—Ä–æ–Ω—ñ —É –∫—ñ–Ω—Ü—ñ: https://63f1fde1aab7d09125ff6f7c.mockapi.io/items?orderBy=price&order=desc&search=–ü–µ–ø–ø–µ—Ä–æ–Ω–∏
// –ø–æ –ø–æ—ñ—Å–∫—É –º–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç—å filter –∞–±–æ search  // &search=–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ –∞–±–æ &filter=–ü–µ–ø–ø–µ—Ä–æ–Ω–∏
// –¥–∞–ª—å—à–µ –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—ñ—Å–∫–∞ https://63f1fde1aab7d09125ff6f7c.mockapi.io/items?orderBy=price&order=desc&filter=–ü–µ–ø–ø–µ—Ä–æ–Ω–∏&category=2&rating=1 , —Ç—ñ–ø–∞ —á–µ—Ä–µ–∑ & –¥–æ–±–∞–≤–ª—è—î–º —à–æ + —à—É–∫–∞—î–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó 2 —ñ —Ä–µ–π—Ç—ñ–Ω–≥—É 1
// —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º: https://63f1fde1aab7d09125ff6f7c.mockapi.io/items?orderBy=price&order=desc&category=1