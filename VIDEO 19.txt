useParams, useLocation, Outlet в рєакт-роутері



в Header 

import { Link, useLocation } from 'react-router-dom';
  const location = useLocation();

// useLocation заставляє робить перерісовку. В даному випадку пропадає кнопка в корзіні у хедері
// {location.pathname} - в цілому може показувать путь, наприклад ненайденої сторінкі, яку ми ввели

 <div className="header__cart">
          {location.pathname != '/cart' && <Link to="/cart" className="button button--cart">   // оце тіпа якщо ми не в корзіні а на главній то кнопка корзіни показується, а в корзіні ні
            <span>{totalPrice} ₽</span>
            <div className="button__delimiter"></div>
            <svg
              width="18"
              height="18"
              viewBox="0 0 18 18"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6.33333 16.3333C7.06971 16.3333 7.66667 15.7364 7.66667 15C7.66667 14.2636 7.06971 13.6667 6.33333 13.6667C5.59695 13.6667 5 14.2636 5 15C5 15.7364 5.59695 16.3333 6.33333 16.3333Z"
                stroke="white"
                strokeWidth="1.8"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M14.3333 16.3333C15.0697 16.3333 15.6667 15.7364 15.6667 15C15.6667 14.2636 15.0697 13.6667 14.3333 13.6667C13.597 13.6667 13 14.2636 13 15C13 15.7364 13.597 16.3333 14.3333 16.3333Z"
                stroke="white"
                strokeWidth="1.8"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M4.78002 4.99999H16.3334L15.2134 10.5933C15.1524 10.9003 14.9854 11.176 14.7417 11.3722C14.4979 11.5684 14.1929 11.6727 13.88 11.6667H6.83335C6.50781 11.6694 6.1925 11.553 5.94689 11.3393C5.70128 11.1256 5.54233 10.8295 5.50002 10.5067L4.48669 2.82666C4.44466 2.50615 4.28764 2.21182 4.04482 1.99844C3.80201 1.78505 3.48994 1.66715 3.16669 1.66666H1.66669"
                stroke="white"
                strokeWidth="1.8"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <span>{totalCount}</span>
          </Link>
          }
        </div>



==
Создали файл FullPizza.jsx
Тут буде піцца по кліку на неї

import React from 'react'
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';

// useParams як я поняв дозволяє переписувать ссилку... благодаря : там можуть бути рівні вложенності...

const FullPizza = () => {
    const [pizza, setPizza] = React.useState();
    const { id } = useParams();
    const navigate = useNavigate();

    React.useEffect(() => {
        async function fetchPizza() {
            try {
                const { data } = await axios.get('https://63f1fde1aab7d09125ff6f7c.mockapi.io/items/' + id);
                setPizza(data);
            } catch (error) {
                alert('Ошибка при получении пиццы!')
                navigate('/')  // це переход на головну сторінку
            }
        }
        fetchPizza();
    }, [])

    if (!pizza) {
        return ('Загрузка...')   // оце для того шоб не було ошибкі, тіпа покі піцца  не загрузилась рендерить шо загружається ще
    }

    return (
        <div className='container'>
            <img src={pizza.imageUrl} alt="" />
            <h2>{pizza.title}</h2>
            <h4>{pizza.price} ₽</h4>
        </div>
    )
}

export default FullPizza;



в App.js

    <Routes>
      <Route path="/" element={<MainLayout />}>
        <Route path="" element={<Home />} />
        <Route path="cart" element={<Cart />} />
        <Route path="pizza/:id" element={<FullPizza />} />   //  отут по id получаєш нужну піццу. буде наприклад http://localhost:3000/pizza/8
        <Route path="*" element={<NotFound />} />
      </Route>
    </Routes>



в Home


  const pizzas = items.map((obj) => <PizzaBlock key={obj.id} {...obj} />); // рендер піцц
В PizzaBlock.jsx обгорнули ці піцци на переход

        <Link key={id} to={`/pizza/${id}`}>
          <div className="pizza-transition">
            <img
              className="pizza-block__image"
              src={imageUrl}
              alt="Pizza"
            />
            <h4 className="pizza-block__title">{title}</h4>
          </div>
        </Link>



// useLocation дає нам понять шо не тількі адрєсна строчка помінялась, а і що компоненту треба зробити перерисовку 

useParams ми іспользуєм для того, щоб оповістити компонент, що треба зробити перерисовку і вернуть в нашу пєрємєнну ті параметри дінамічєскі,
якщо вони будуть у нас содєржаться. Дінамічєскі парамєтри це ті що починаються з двоєточія :  назви пєрємєнной. Отут дінамічєскі парамєтри         <Route path="pizza/:id" element={<FullPizza />} />


==
Outlet
создали MainLayout.jsx

import React from 'react'
import Header from '../components/Header';
import { Outlet } from 'react-router-dom';

const MainLayout = () => {
    return (
        <div className='wrapper'>
            <Header />                  // логіка така шо хедер у нас кругом, а Outlet міняється. Хедер з App.js сюда перенесли 
            <div className='content'>
                <Outlet />
            </div>
        </div>
    )
}

export default MainLayout;


в App.js

    <Routes>
      <Route path="/" element={<MainLayout />}>   // оце главний роут обгорнули в MainLayout
        <Route path="" element={<Home />} />
        <Route path="cart" element={<Cart />} />
        <Route path="pizza/:id" element={<FullPizza />} />
        <Route path="*" element={<NotFound />} />
      </Route>
    </Routes>